[mypage::header "Access Control Schemes"]
TclHttpd supports access control at two levels.
The most general support is through an access control
procedure, or filter, that is run before each URL
is processed.  These filters are registered with the
Url_AccessHook procedure.  See the lib/url.tcl file
for more details about access control filters.
<p>
The Doc_AccessHook procedure provides support for
Apache-style .htaccess files.  This is enabled by
default.  Here is an <a href="htaccess.html">explanation
of .htaccess files</a> by Piet Vloet.
<p>
Another feature implemented by Doc_AccessHook is support
for .tclaccess files.  These files are short Tcl scripts
that define two variables: "realm" and "callback".
The browser will display the realm string in the password
prompt.  The server will invoke the procedure named by
the callback variable to check the password.

<b>Examples:</b>
<br>
<a href=bytcl/>The first example</a> uses a .tclaccess file in the directory that
specifies a Tcl procedure to run to check the password.  Try "tclhttpd" and "I love Tcl",
then check out <a href=/debug/showproc?proc=MyPasswordChecker>MyPasswordChecker</a> to
see how easy this can be.<br>

<a href=null/>Funky auto-login mechanism</a>  This uses the AuthNullCallback procedure that
forces you to try to login twice, and then remembers that password until the server restarts.
I'm not sure how useful this really is.<br>

<a href=session/>More AuthNullCallback</a>  Another example from an ancient demo.
</ul>

[mypage::footer]
