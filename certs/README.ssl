While TclHttpd can support SSL, you will need to add a number of
software components to complete your SSL server.

At the base is either RSAREF or OpenSSL.  Within the United States there are
patent restrictions that limit you to using RSAREF from RSA Inc.  Actually,
you can also build OpenSSL with a "no patents" option.  Both of these packages
create a crypto library with the same interface.
	http://www.rsa.com
	http://www.openssl.org

Next comes the "TLS" Tcl extension, which uses the crypto library.  You can get
this from the Scriptics CVS repository, or from its home at
	http://www.sensus.org/tcl/
NOTE: You really do need the version from our CVS repository.  There is
a snapshot of this at ftp://ftp.scriptics.com/pub/tcl/httpd/tls1.3.cvs.tar.gz
As of this writing, the most stable SSL configuration is to use the
latest TLS from CVS and the "core-8-3-1-branch" CVS branch of Tcl 8.3

Finally you need keys and certificates for your server.  OpenSSL comes with
a command-line utility called "openssl" that you can use to generate keys
and certificates.  The RSFREF utility is "sslc", but provides essentially
the same features.  The general process is that you generate a public-private
key pair (using the "genrsa" command for sslc or openssl)
    sslc genrsa -out skey.pem
Next you create a certificate request
    sslc req -config /path/to/ssl.cnf -new -nodex -out ./server.pem -key ./skey.pem
and send this to a certificate authority for signing. 
One example Certificate Authority is
    http://www.verisign.com

Once you get the signed certificate back, edit the tclhttpd.rc file so they
accurately record the location of your keyfile and certificate.  The server should
then be able to listen for SSL connections on the https port.

You can also bootstrap yourself into your own CA by generating a key and certificate
as above (but call them cakey.pem and cacert.pem).  Now self-sign the cacert.pem
to create a Certificate Authority certificate.  This lets you sign your own
certificate requests to make valid certificates, but browsers will prompt users
to validate the key when they visit your site.

